package.json contains all npm dependencies
we use npm install to install / update dependencies / install modules
we now have the following modules to work with:
pg - node-postgres: Non-blocking PostgreSQL client for Node.js. Pure JavaScript and optional native libpq bindings.
argon2 - node-argon2: Argon2 is a password-hashing function that summarizes the state of the art in the design of memory-hard functions and can be used to hash passwords for credential storage, key derivation, or other applications.
express - express: Fast, unopinionated, minimalist web framework for node.
jwt - jsonwebtoken: An implementation of JSON Web Tokens.


Serverside - index.js
lines 1-8:
exported module content is imported with the use of Node.js require() functon.

require(id)
Node.js require() function takes a string that represents the module name or path as argument
The function returns exported module content / imports the value of the module object's exports property

require('path')
Node's built in path module is imported
provides a way of working with directories and file paths

require('pg') imports:
the var PG (not too sure what's going on in index.js: 17-25)
the PG var includes the pool property that we're going to use later

require('argon2') imports:
module.exports = { defaults, limits, hash, needsRehash, verify, ...types };

require('express') imports:
the exported modules contained in the directory lib
module.exports = require('./lib/express');

interesting to note:
exports = module.exports = createApplication;
https://stackoverflow.com/questions/23509162/expressjs-javascript-fundamentals-exports-module-exports-createapplication
